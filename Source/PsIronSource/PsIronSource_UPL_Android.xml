<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<trace enable="true"/>

	<init>
		<setBoolFromProperty result="bIronSourceEnable" ini="Engine" section="/Script/PsIronSource.PsIronSourceSettings" property="bIronSourceEnable" default="false"/>
		<setStringFromProperty result="GADAppId" ini="Engine" section="/Script/PsIronSource.PsIronSourceSettings" property="AdMobAndroidAppId" default="" />
	</init>

	<androidManifestUpdates>
		<if condition="bIronSourceEnable">
			<true>
				<addPermission android:name="android.permission.INTERNET"/>
				<addPermission android:name="android.permission.ACCESS_NETWORK_STATE"/>
				<addPermission android:name="com.google.android.gms.permission.AD_ID"/>

				<setElement result="ControllerActivity" value="activity" />
				<addAttribute tag="$ControllerActivity" name="android:name" value="com.ironsource.sdk.controller.ControllerActivity" />
				<addAttribute tag="$ControllerActivity" name="android:configChanges" value="orientation|screenSize" />
				<addAttribute tag="$ControllerActivity" name="android:hardwareAccelerated" value="true" />
				<addElement tag="application" name="ControllerActivity" />

				<setElement result="InterstitialActivity" value="activity" />
				<addAttribute tag="$InterstitialActivity" name="android:name" value="com.ironsource.sdk.controller.InterstitialActivity" />
				<addAttribute tag="$InterstitialActivity" name="android:configChanges" value="orientation|screenSize" />
				<addAttribute tag="$InterstitialActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$InterstitialActivity" name="android:theme" value="@android:style/Theme.Translucent" />
				<addElement tag="application" name="InterstitialActivity" />

				<setElement result="OpenUrlActivity" value="activity" />
				<addAttribute tag="$OpenUrlActivity" name="android:name" value="com.ironsource.sdk.controller.OpenUrlActivity" />
				<addAttribute tag="$OpenUrlActivity" name="android:configChanges" value="orientation|screenSize" />
				<addAttribute tag="$OpenUrlActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$OpenUrlActivity" name="android:theme" value="@android:style/Theme.Translucent" />
				<addElement tag="application" name="OpenUrlActivity" />

				<setElement result="AudienceNetworkActivity" value="activity" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:name" value="com.facebook.ads.AudienceNetworkActivity" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:hardwareAccelerated" value="true" />
				<addElement tag="application" name="AudienceNetworkActivity" />

				<setElement result="AdUnitActivity" value="activity" />
				<addAttribute tag="$AdUnitActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitActivity" />
				<addAttribute tag="$AdUnitActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AdUnitActivity" name="android:theme" value="@android:style/Theme.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitActivity" />

				<setElement result="AdUnitTransparentActivity" value="activity" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitTransparentActivity" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitTransparentActivity" />

				<setElement result="AdUnitTransparentSoftwareActivity" value="activity" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitTransparentSoftwareActivity" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:hardwareAccelerated" value="false" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitTransparentSoftwareActivity" />

				<setElement result="AdUnitSoftwareActivity" value="activity" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitSoftwareActivity" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:hardwareAccelerated" value="false" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:theme" value="@android:style/Theme.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitSoftwareActivity" />

				<setElement result="AppLovinInterstitialActivity" value="activity" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:name" value="com.applovin.adview.AppLovinInterstitialActivity" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:configChanges" value="orientation|screenSize|smallestScreenSize|screenLayout|uiMode" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:screenOrientation" value="behind" />
				<addElement tag="application" name="AppLovinInterstitialActivity" />

				<setElement result="AppLovinFullscreenActivity" value="activity" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:name" value="com.applovin.adview.AppLovinFullscreenActivity" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:configChanges" value="keyboard|keyboardHidden|locale|orientation|screenLayout|screenSize|smallestScreenSize|uiMode" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:screenOrientation" value="behind" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:launchMode" value="singleTop" />
				<addElement tag="application" name="AppLovinFullscreenActivity" />

				<setElement result="AppLovinWebViewActivity" value="activity" />
				<addAttribute tag="$AppLovinWebViewActivity" name="android:name" value="com.applovin.sdk.AppLovinWebViewActivity" />
				<addAttribute tag="$AppLovinWebViewActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize|uiMode" />
				<addElement tag="application" name="AppLovinWebViewActivity" />

				<setElement result="GmsAdActivity" value="activity" />
				<addAttribute tag="$GmsAdActivity" name="android:name" value="com.google.android.gms.ads.AdActivity" />
				<addAttribute tag="$GmsAdActivity" name="android:configChanges" value="keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize" />
				<addAttribute tag="$GmsAdActivity" name="android:theme" value="@android:style/Theme.Translucent" />
				<addElement tag="application" name="GmsAdActivity" />

				<setElement result="AdMobAppId" value="meta-data" />
				<addAttribute tag="$AdMobAppId" name="android:name" value="com.google.android.gms.ads.APPLICATION_ID" />
				<addAttribute tag="$AdMobAppId" name="android:value" value="$S(GADAppId)" />
				<addElement tag="application" name="AdMobAppId" />

				<addAttribute tag="application" name="android:usesCleartextTraffic" value="true"/>

				<setElement result="AdColonyInterstitialActivity" value="activity" />
				<addAttribute tag="$AdColonyInterstitialActivity" name="android:name" value="com.adcolony.sdk.AdColonyInterstitialActivity" />
				<addAttribute tag="$AdColonyInterstitialActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize" />
				<addAttribute tag="$AdColonyInterstitialActivity" name="android:hardwareAccelerated" value="true" />
				<addElement tag="application" name="AdColonyInterstitialActivity" />

				<setElement result="AdColonyAdViewActivity" value="activity" />
				<addAttribute tag="$AdColonyAdViewActivity" name="android:name" value="com.adcolony.sdk.AdColonyAdViewActivity" />
				<addAttribute tag="$AdColonyAdViewActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize" />
				<addAttribute tag="$AdColonyAdViewActivity" name="android:hardwareAccelerated" value="true" />
				<addElement tag="application" name="AdColonyAdViewActivity" />

				<setElement result="TJAdUnitActivity" value="activity" />
				<addAttribute tag="$TJAdUnitActivity" name="android:name" value="com.tapjoy.TJAdUnitActivity" />
				<addAttribute tag="$TJAdUnitActivity" name="android:configChanges" value="orientation|keyboardHidden|screenSize" />
				<addAttribute tag="$TJAdUnitActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$TJAdUnitActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="TJAdUnitActivity" />

				<setElement result="TJContentActivity" value="activity" />
				<addAttribute tag="$TJContentActivity" name="android:name" value="com.tapjoy.TJContentActivity" />
				<addAttribute tag="$TJContentActivity" name="android:configChanges" value="orientation|keyboardHidden|screenSize" />
				<addAttribute tag="$TJContentActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$TJContentActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar" />
				<addElement tag="application" name="TJContentActivity" />

				<setElement result="InMobiAdActivity" value="activity" />
				<addAttribute tag="$InMobiAdActivity" name="android:name" value="com.inmobi.ads.rendering.InMobiAdActivity" />
				<addAttribute tag="$InMobiAdActivity" name="android:configChanges" value="keyboardHidden|orientation|keyboard|smallestScreenSize|screenSize|screenLayout|locale|fontScale|uiMode" />
				<addAttribute tag="$InMobiAdActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$InMobiAdActivity" name="android:theme" value="@android:style/Theme.NoTitleBar" />
				<addElement tag="application" name="InMobiAdActivity" />

				<setElement result="CBImpressionActivity" value="activity" />
				<addAttribute tag="$CBImpressionActivity" name="android:name" value="com.chartboost.sdk.CBImpressionActivity" />
				<addAttribute tag="$CBImpressionActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize" />
				<addAttribute tag="$CBImpressionActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$CBImpressionActivity" name="android:excludeFromRecents" value="true" />
				<addAttribute tag="$CBImpressionActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="CBImpressionActivity" />

				<addLibrary android:name="org.apache.http.legacy" android:required="false"/>

				<setElement result="MyTargetActivity" value="activity" />
				<addAttribute tag="$MyTargetActivity" name="android:name" value="com.my.target.common.MyTargetActivity" />
				<addAttribute tag="$MyTargetActivity" name="android:configChanges" value="keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize" />
				<addElement tag="application" name="MyTargetActivity" />

				<!--
				<setElement result="TTProvider" value="provider" />
				<addAttribute tag="$TTProvider" name="android:name" value="com.bytedance.sdk.openadsdk.multipro.TTMultiProvider" />
				<addAttribute tag="$TTProvider" name="android:authorities" value="$S(PackageName).TTMultiProvider" />
				<addAttribute tag="$TTProvider" name="android:exported" value="false" />
				<addElement tag="application" name="TTProvider" />
				-->
			</true>
		</if>
	</androidManifestUpdates>

	<proguardAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					<![CDATA[
					# IronSource
					-keepclassmembers class com.ironsource.sdk.controller.IronSourceWebView$JSInterface {
					public *;
					}
					-keepclassmembers class * implements android.os.Parcelable {
					public static final android.os.Parcelable$Creator *;
					}
					-keep public class com.google.android.gms.ads.** {
					public *;
					}
					-keep class com.ironsource.adapters.** { *;
					}
					-dontwarn com.ironsource.mediationsdk.**
					-dontwarn com.ironsource.adapters.**
					-keepattributes JavascriptInterface
					-keepclassmembers class * {
					@android.webkit.JavascriptInterface <methods>;
					}


					# Custom
					-dontwarn com.applovin.impl.**
					-dontwarn com.chartboost.sdk.**
					-dontwarn com.adcolony.sdk.**
					-dontwarn com.google.android.exoplayer2.**
					-dontwarn com.my.target.**
					-dontwarn okhttp3.internal.platform.*


					# AppLovin
					-keepattributes Signature,InnerClasses,Exceptions,Annotation
					-keep public class com.applovin.sdk.AppLovinSdk{ *; }
					-keep public class com.applovin.sdk.AppLovin* { public protected *; }
					-keep public class com.applovin.nativeAds.AppLovin* { public protected *; }
					-keep public class com.applovin.adview.* { public protected *; }
					-keep public class com.applovin.mediation.* { public protected *; }
					-keep public class com.applovin.mediation.ads.* { public protected *; }
					-keep public class com.applovin.impl.*.AppLovin { public protected *; }
					-keep public class com.applovin.impl.**.*Impl { public protected *; }
					-keepclassmembers class com.applovin.sdk.AppLovinSdkSettings { private java.util.Map localSettings; }
					-keep class com.applovin.mediation.adapters.** { *; }
					-keep class com.applovin.mediation.adapter.**{ *; }


					# Facebook
					-dontwarn com.facebook.ads.internal.**
					-keeppackagenames com.facebook.*
					-keep public class com.facebook.ads.** {*;}
					-keep public class com.facebook.ads.**
					{ public protected *; }


					# Unity
					# Keep filenames and line numbers for stack traces
					-keepattributes SourceFile,LineNumberTable
					# Keep JavascriptInterface for WebView bridge
					-keepattributes JavascriptInterface
					# Sometimes keepattributes is not enough to keep annotations
					-keep class android.webkit.JavascriptInterface {
					*;
					}
					# Keep all classes in Unity Ads package
					-keep class com.unity3d.ads.** {
					*;
					}
					# Keep all classes in Unity Services package
					-keep class com.unity3d.services.** {
					*;
					}
					-dontwarn com.google.ar.core.**
					-dontwarn com.unity3d.services.**
					-dontwarn com.ironsource.adapters.unityads.**


					# AdColony
					# Keep ADCNative class members unobfuscated
					-keepclassmembers class com.adcolony.sdk.ADCNative** {
					*;
					}


					#TapJoy
					-keep class com.tapjoy.** { *; }
					-keep class com.moat.** { *; }
					-keepattributes JavascriptInterface
					-keepattributes *Annotation*
					-keep class * extends java.util.ListResourceBundle {
					protected Object[][] getContents();
					}
					-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {
					public static final *** NULL;
					}
					-keepnames @com.google.android.gms.common.annotation.KeepName class *
					-keepclassmembernames class * {
					@com.google.android.gms.common.annotation.KeepName *;
					}
					-keepnames class * implements android.os.Parcelable {
					public static final ** CREATOR;
					}
					-keep class com.google.android.gms.ads.identifier.** { *; }
					-dontwarn com.tapjoy.**


					# InMobi
					-keepattributes SourceFile,LineNumberTable
					-keep class com.inmobi.** { *; }
					-dontwarn com.inmobi.**
					-keep public class com.google.android.gms.**
					-dontwarn com.google.android.gms.**
					-dontwarn com.squareup.picasso.**
					-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient{
					public *;
					}
					-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info{
					public *;
					}
					# skip the Picasso library classes
					-keep class com.squareup.picasso.** {*;}
					-dontwarn com.squareup.picasso.**
					-dontwarn com.squareup.okhttp.**
					# skip Moat classes
					-keep class com.moat.** {*;}
					-dontwarn com.moat.**
					# skip AVID classes
					-keep class com.integralads.avid.library.* {*;}


					# Chartboost
					-keep class com.chartboost.** { *; }


					# MyTarget
					-keep class com.my.target.** { *; }

					# Pangle
					-keep class com.bytedance.sdk.openadsdk.*{ public *; }

					# Yandex
					-keep class com.ironsource.mobileads.** {
					    *;
					}
					]]>
				</insert>
			</true>
		</if>
	</proguardAdditions>

	<buildGradleAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					repositories {

					jcenter()
					mavenCentral()

					maven {
					url 'https://android-sdk.is.com/'
					}
					maven {
					url "https://www.jitpack.io"
					}
					maven {
					url "https://sdk.tapjoy.com/"
					}
					maven {
					url "https://artifact.bytedance.com/repository/pangle"
					}
					}

					dependencies {
					implementation 'com.ironsource.sdk:mediationsdk:7.2.4.1'
					implementation fileTree(dir: 'libs', include: ['*.jar'])
					implementation 'com.google.android.gms:play-services-appset:16.0.0'
					implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
					implementation 'com.google.android.gms:play-services-basement:17.1.1'

					// Add AdColony Network
					implementation 'com.ironsource.adapters:adcolonyadapter:4.3.12'
					implementation 'com.adcolony:sdk:4.7.1'
					// Add AdMob and Ad Manager Network
					implementation 'com.google.android.gms:play-services-ads:21.1.0'
					implementation 'com.ironsource.adapters:admobadapter:4.3.30'
					// Add Applovin Network
					implementation 'com.ironsource.adapters:applovinadapter:4.3.33'
					implementation 'com.applovin:applovin-sdk:11.4.4'
					constraints {
					implementation('com.google.android.exoplayer:exoplayer:2.17.1') {
					because 'version 2.15.1 conflicts with myTarget'
					}
					}
					// Add Chartboost Network
					implementation 'com.ironsource.adapters:chartboostadapter:4.3.9'
					implementation 'com.chartboost:chartboost-sdk:9.0.0'
					implementation "com.google.android.gms:play-services-base:18.0.1"
					// Add Facebook Network
					implementation 'com.ironsource.adapters:facebookadapter:4.3.37'
					implementation 'com.facebook.android:audience-network-sdk:6.11.0'
					// Add InMobi
					implementation 'com.ironsource.adapters:inmobiadapter:4.3.15' 
					implementation 'com.inmobi.monetization:inmobi-ads:10.0.8' 
					implementation 'com.google.android.gms:play-services-location:17.1.0'//optional dependency for better targeting
					// Add myTarget Network
					implementation 'com.ironsource.adapters:mytargetadapter:4.1.14'
					implementation 'com.my.target:mytarget-sdk:5.15.3'
					implementation 'com.google.android.exoplayer:exoplayer-core:2.17.1'
					implementation 'com.google.android.exoplayer:exoplayer-hls:2.17.1'
					implementation 'com.my.tracker:mytracker-sdk:3.0.0'
					// Add Pangle Network
					implementation 'com.ironsource.adapters:pangleadapter:4.3.14'
					implementation 'com.pangle.global:ads-sdk:4.5.0.4'
					// Add Tapjoy Network
					implementation 'com.ironsource.adapters:tapjoyadapter:4.1.21'
					implementation 'com.tapjoy:tapjoy-android-sdk:12.10.0'
					// Add UnityAds Network
					implementation 'com.ironsource.adapters:unityadsadapter:4.3.22'
					implementation 'com.unity3d.ads:unity-ads:4.3.0'

					// Add Yandex network
					implementation 'com.yandex.android:mobileads:5.2.1'
					constraints {
					implementation('com.yandex.android:mobmetricalib:5.0.0') {
					because 'version 4.2.0 has issues with privacy policies'
					}
					}

					implementation 'com.yandex.ads.adapter:ironsource-mobileads:5.2.0.0'
					}

					android {
					compileOptions {
					sourceCompatibility 1.8
					targetCompatibility 1.8
					}
					}

					// Fix target sdk 30 compatibility for Yandex
					configurations.all {
					resolutionStrategy {
					force 'androidx.core:core-ktx:1.6.0'
					force 'androidx.core:core:1.6.0'
					}
					}
				</insert>
			</true>
		</if>
	</buildGradleAdditions>

	<gameActivityImportAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					import android.util.Log;
					import com.ironsource.adapters.supersonicads.SupersonicConfig;
					import com.ironsource.mediationsdk.IronSource;
					import com.ironsource.mediationsdk.IronSourceBannerLayout;
					import com.ironsource.mediationsdk.integration.IntegrationHelper;
					import com.ironsource.mediationsdk.logger.IronSourceError;
					import com.ironsource.mediationsdk.model.Placement;
					import com.ironsource.mediationsdk.sdk.BannerListener;
					import com.ironsource.mediationsdk.sdk.InterstitialListener;
					import com.ironsource.mediationsdk.sdk.OfferwallListener;
					import com.ironsource.mediationsdk.sdk.RewardedVideoListener;
					import com.ironsource.mediationsdk.impressionData.ImpressionDataListener;
					import com.ironsource.mediationsdk.impressionData.ImpressionData;
					import com.ironsource.mediationsdk.utils.IronSourceUtils;
					import com.yandex.mobile.ads.common.*;
				</insert>
			</true>
		</if>
	</gameActivityImportAdditions>

	<gameActivityClassAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					/// ******************* CALL TO CPP ********************
					///    *********************************************
					///
					private native void onRewardedVideoAdOpenedThunkCpp();
					private native void onRewardedVideoAdClosedThunkCpp();
					private native void onRewardedVideoAvailabilityChangedThunkCpp(boolean available);
					private native void onRewardedVideoAdStartedThunkCpp();
					private native void onRewardedVideoAdEndedThunkCpp();
					private native void onRewardedVideoAdRewardedThunkCpp();
					private native void onRewardedVideoAdShowFailedThunkCpp(int errorCode, String errorMessage);
					private native void onRewardedVideoAdClickedThunkCpp();
					private native void onImpressionSuccessThunkCpp(ImpressionData Data);

					private native void onInterstitialAdReadyThunkCpp();
					private native void onInterstitialAdLoadFailedThunkCpp(int errorCode, String errorMessage);
					private native void onInterstitialAdOpenedThunkCpp();
					private native void onInterstitialAdClosedThunkCpp();
					private native void onInterstitialAdShowFailedThunkCpp(int errorCode, String errorMessage);
					private native void onInterstitialAdClickedThunkCpp();
					private native void onInterstitialAdShowSucceededThunkCpp();

					private native void onOfferwallAvailabilityChangedThunkCpp(boolean available);
					private native void onOfferwallOpenedThunkCpp();					
					private native void onOfferwallShowFailedThunkCpp(int errorCode, String errorMessage);
					private native boolean onOfferwallCreditedThunkCpp(int credits, int totalCredits, boolean totalCreditsFlag);
					private native void onOfferwallGetCreditsFailedThunkCpp(int errorCode, String errorMessage);
					private native void onOfferwallClosedThunkCpp();

					/// ******************* REWARDED VIDEO ******************
					///    ***********************************************
					///
					RewardedVideoListener mRewardedVideoListener = new RewardedVideoListener()
					{
						// Invoked when the RewardedVideo ad view has opened.
						// Your Activity will lose focus. Please avoid performing heavy 
						// tasks till the video ad will be closed.
						@Override
						public void onRewardedVideoAdOpened()
						{
							onRewardedVideoAdOpenedThunkCpp();
						}
	
						// Invoked when the RewardedVideo ad view is about to be closed.
						// Your activity will now regain its focus.
						@Override
						public void onRewardedVideoAdClosed()
						{
							onRewardedVideoAdClosedThunkCpp();
						}
	
						// Invoked when there is a change in the ad availability status.
						// @param - available - value will change to true when rewarded videos are available. 
						// You can then show the video by calling showRewardedVideo().
						// Value will change to false when no videos are available.
						@Override
						public void onRewardedVideoAvailabilityChanged(boolean available)
						{
							onRewardedVideoAvailabilityChangedThunkCpp(available);
						}
	
						// Invoked when the video ad starts playing.
						@Override
						public void onRewardedVideoAdStarted()
						{
							onRewardedVideoAdStartedThunkCpp();
						}
	
						// Invoked when the video ad finishes playing.
						@Override
						public void onRewardedVideoAdEnded()
						{
							onRewardedVideoAdEndedThunkCpp();
						}
	
						// Invoked when the user completed the video and should be rewarded. 
						// If using server-to-server callbacks you may ignore this events and wait for 
						// the callback from the Supersonic server.
						// @param - placement - the Placement the user completed a video from.
						@Override
						public void onRewardedVideoAdRewarded(Placement placement)
						{
							onRewardedVideoAdRewardedThunkCpp();
						}
	
						// Invoked when RewardedVideo call to show a rewarded video has failed
						@Override
						public void onRewardedVideoAdShowFailed(IronSourceError ironSourceError)
						{
							onRewardedVideoAdShowFailedThunkCpp(ironSourceError.getErrorCode(), ironSourceError.getErrorMessage());
						}
	
						@Override
						public void onRewardedVideoAdClicked(Placement placement)
						{
							onRewardedVideoAdClickedThunkCpp();
						}
					};

					/// ******************** IMPRESSION ********************
					///    *********************************************
					///
					ImpressionDataListener mImpressionDataListener = new ImpressionDataListener()
					{
						@Override 
						public void onImpressionSuccess(ImpressionData impressionData)
						{
							onImpressionSuccessThunkCpp(impressionData);
						}
					};

					/// ******************* INTERSTITIALS *******************
					///    ***********************************************
					///
					InterstitialListener mInterstitialsVideoListener = new InterstitialListener()
					{
						/**
						* Invoked when Interstitial Ad is ready to be shown after load function was called.
						*/
						@Override
						public void onInterstitialAdReady()
						{
							Log.debug("onInterstitialAdReady");
							onInterstitialAdReadyThunkCpp();
						}
	
						/**
						* Invoked when there is no Interstitial Ad available after calling load function.
						*/
						@Override
						public void onInterstitialAdLoadFailed(IronSourceError error)
						{
							Log.debug(String.format("onInterstitialAdLoadFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
							
							onInterstitialAdLoadFailedThunkCpp(error.getErrorCode(), error.getErrorMessage());
						}
	
						/**
						* Invoked when the Interstitial Ad Unit is opened
						*/
						@Override
						public void onInterstitialAdOpened()
						{
							Log.debug("onInterstitialAdOpened");

							onInterstitialAdOpenedThunkCpp();
						}
	
						/*
						* Invoked when the ad is closed and the user is about to return to the application
						*/
						@Override
						public void onInterstitialAdClosed()
						{
							Log.debug("onInterstitialAdClosed");
							onInterstitialAdClosedThunkCpp();
						}
	
						/**
						* Invoked when Interstitial ad failed to show
						* @param error - An object which represents the reason of showInterstitial failure.
						*/
						@Override
						public void onInterstitialAdShowFailed(IronSourceError error)
						{
							Log.debug(String.format("onInterstitialAdShowFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
					
							onInterstitialAdShowFailedThunkCpp (error.getErrorCode(), error.getErrorMessage());
						}
	
						/*
						* Invoked when the end user clicked on the interstitial ad, for supported networks only
						*/
						@Override
						public void onInterstitialAdClicked()
						{
							Log.debug("onInterstitialAdClicked");
							onInterstitialAdClickedThunkCpp();
						}
						
						/** Invoked right before the Interstitial screen is about to open.
						*  NOTE - This event is available only for some of the networks.
						*  You should NOT treat this event as an interstitial impression, but rather use InterstitialAdOpenedEvent
						*/
						@Override
						public void onInterstitialAdShowSucceeded()
						{
							Log.debug("onInterstitialAdShowSucceeded");
							onInterstitialAdShowSucceededThunkCpp();
						}
					};

					/// ********************* OFFERWALL *********************
					///    ***********************************************
					///
					OfferwallListener mOfferwallListener = new OfferwallListener()
					{
						/**
						* Invoked when there is a change in the Offerwall availability status.
						* @param - available - value will change to YES when Offerwall are available.
						* You can then show the offerwall by calling showOfferwall(). Value will *change to NO when Offerwall isn't available.
						*/
						@Override
						public void onOfferwallAvailable(boolean isAvailable) 
						{
							Log.debug(String.format("onOfferwallAvailable: %b", isAvailable));
							onOfferwallAvailabilityChangedThunkCpp(isAvailable);
						}
					
						/**
						* Invoked when the Offerwall successfully loads for the user, after calling the 'showOfferwall' method
						*/
						@Override
						public void onOfferwallOpened() 
						{
							Log.debug("onOfferwallOpened");
							onOfferwallOpenedThunkCpp();
						}
					
						/**
						* Invoked when the method 'showOfferwall' is called and the Offerwall fails to load.
						* @param error - A IronSourceError Object which represents the reason of 'showOfferwall' failure.
						*/
						@Override
						public void onOfferwallShowFailed(IronSourceError error) 
						{
							Log.debug(String.format("onOfferwallShowFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
							onOfferwallShowFailedThunkCpp(error.getErrorCode(), error.getErrorMessage());
						}
					
						/**
						* Invoked each time the user completes an Offer.
						* Award the user with the credit amount corresponding to the value of the *‘credits’ parameter.
						* @param credits - The number of credits the user has earned.
						* @param totalCredits - The total number of credits ever earned by the user.
						* @param totalCreditsFlag - In some cases, we won’t be able to provide the exact
						* amount of credits since the last event (specifically if the user clears
						* the app’s data). In this case the ‘credits’ will be equal to the ‘totalCredits’, and this flag will be ‘true’.
						* @return boolean - true if you received the callback and rewarded the user, otherwise false.
						*/
						@Override
						public boolean onOfferwallAdCredited(int credits, int totalCredits, boolean totalCreditsFlag) 
						{
							Log.debug("onOfferwallAdCredited");
							return onOfferwallCreditedThunkCpp (credits, totalCredits, totalCreditsFlag);
						}
					
						/**
						* Invoked when the method 'getOfferwallCredits' fails to retrieve
						* the user's credit balance info.
						* @param error - A IronSourceError object which represents the reason of 'getOfferwallCredits' failure.
						* If using client-side callbacks to reward users, it is mandatory to return true on this event
						*/
						@Override
						public void onGetOfferwallCreditsFailed(IronSourceError error) 
						{
							Log.debug(String.format("onGetOfferwallCreditsFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
							onOfferwallGetCreditsFailedThunkCpp(error.getErrorCode(), error.getErrorMessage());
						}
					
						/**
						* Invoked when the user is about to return to the application after closing
						* the Offerwall.
						*/
						@Override
						public void onOfferwallClosed() 
						{
							Log.debug("onOfferwallClosed");
							onOfferwallClosedThunkCpp();
						}
					};

					/// ******************* CALLABLE FROM CPP *******************
					///    ***********************************************
					///
					public void AndroidThunkJava_IronSource_init(String APIKey, String UserId)
					{
						Log.debug("AndroidThunkJava_IronSource_init");
						
						// NOTE: call setClientSideCallbacks(true) before IronSource.init ()
						SupersonicConfig.getConfigObj().setClientSideCallbacks(true);					
					
						IronSource.setUserId(UserId);
						IronSource.setRewardedVideoListener(mRewardedVideoListener);
						IronSource.addImpressionDataListener(mImpressionDataListener);
						IronSource.setInterstitialListener(mInterstitialsVideoListener);
						IronSource.setOfferwallListener(mOfferwallListener);
						
						IronSource.init(this, APIKey);
						IntegrationHelper.validateIntegration(this);
					}
					
					public void AndroidThunkJava_IronSource_ForceUpdateUser(String UserId)
					{
						Log.debug("AndroidThunkJava_IronSource_ForceUpdateUser");
						IronSource.setDynamicUserId(UserId);
						IntegrationHelper.validateIntegration(this);
					}

					public boolean AndroidThunkJava_IronSource_hasRewardedVideo()
					{
						return IronSource.isRewardedVideoAvailable();
					}

					public String AndroidThunkJava_IronSource_getPlacementRewardName(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_getPlacementRewardName");
						Placement CurrentPlacement = IronSource.getRewardedVideoPlacementInfo(PlacementName);
						if (CurrentPlacement != null)
						{
							return CurrentPlacement.getRewardName();
						}
						else
						{
							return new String();
						}
					}

					public int AndroidThunkJava_IronSource_getPlacementRewardAmount(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_getPlacementRewardAmount");
						Placement CurrentPlacement = IronSource.getRewardedVideoPlacementInfo(PlacementName);
						if (CurrentPlacement != null)
						{
							return CurrentPlacement.getRewardAmount();
						}
						else
						{
							return 0;
						}
					}

					public boolean AndroidThunkJava_IronSource_isRewardedVideoCappedForPlacement(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_isRewardedVideoCappedForPlacement");
						return IronSource.isRewardedVideoPlacementCapped(PlacementName);
					}

					public void AndroidThunkJava_IronSource_showRewardedVideo(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_showRewardedVideo");
						IronSource.showRewardedVideo(PlacementName);
					}

					public void AndroidThunkJava_IronSource_setGDPRConsent(boolean bConsent)
					{
						Log.debug("AndroidThunkJava_IronSource_setGDPRConsent");
						IronSource.setConsent(bConsent);
					}

					public void AndroidThunkJava_IronSource_loadInterstitial()
					{
						Log.debug("AndroidThunkJava_IronSource_LoadInterstitial");
						IronSource.loadInterstitial();
					}

					public boolean AndroidThunkJava_IronSource_isInterstitialReady()
					{
						Log.debug("AndroidThunkJava_IronSource_isInterstitialReady");
						return IronSource.isInterstitialReady();
					}

					public void AndroidThunkJava_IronSource_showInterstitial(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_showInterstitial");
						IronSource.showInterstitial(PlacementName);
					}

					public boolean AndroidThunkJava_IronSource_isInterstitialCappedForPlacement(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_isInterstitialCappedForPlacement");
						return IronSource.isInterstitialPlacementCapped(PlacementName);
					}

					public boolean AndroidThunkJava_IronSource_hasOfferwall()
					{
						Log.debug("AndroidThunkJava_IronSource_hasOfferwall");
						return IronSource.isOfferwallAvailable();
					}

					public void AndroidThunkJava_IronSource_showOfferwall()
					{
						Log.debug("AndroidThunkJava_IronSource_showOfferwall");
						IronSource.showOfferwall();
					}

					public void AndroidThunkJava_IronSource_showOfferwallWithPlacement(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_showOfferwallWithPlacement");
						IronSource.showOfferwall(PlacementName);
					}

					public void AndroidThunkJava_IronSource_getOfferwallCredits()
					{
						Log.debug("AndroidThunkJava_IronSource_getOfferwallCredits");
						IronSource.getOfferwallCredits();
					}
					
				</insert>
			</true>
		</if>
	</gameActivityClassAdditions>

	<gameActivityOnCreateAdditions>
		<insert>
			<![CDATA[
			MobileAds.initialize(this, new InitializationListener() {
				@Override
				public void onInitializationCompleted() {
					Log.debug("YandexMobileAds SDK initialized");
				}
			});
			]]>
		</insert>
	</gameActivityOnCreateAdditions>
	
	<gameActivityOnPauseAdditions>
		<if condition="bIronSourceEnable">
			<true>
				IronSource.onPause(this);
			</true>
		</if>
	</gameActivityOnPauseAdditions>

	<gameActivityOnResumeAdditions>
		<if condition="bIronSourceEnable">
			<true>
				IronSource.onResume(this);
			</true>
		</if>
	</gameActivityOnResumeAdditions>
</root>
