<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<trace enable="true"/>

	<init>
		<setBoolFromProperty result="bIronSourceEnable" ini="Engine" section="/Script/PsIronSource.PsIronSourceSettings" property="bIronSourceEnable" default="false"/>
		<setStringFromProperty result="GADAppId" ini="Engine" section="/Script/PsIronSource.PsIronSourceSettings" property="AdMobAndroidAppId" default="" />
	</init>

	<androidManifestUpdates>
		<if condition="bIronSourceEnable">
			<true>
				<addPermission android:name="android.permission.INTERNET"/>
				<addPermission android:name="android.permission.ACCESS_NETWORK_STATE"/>
				<addPermission android:name="com.google.android.gms.permission.AD_ID"/>

				<setElement result="ControllerActivity" value="activity" />
				<addAttribute tag="$ControllerActivity" name="android:name" value="com.ironsource.sdk.controller.ControllerActivity" />
				<addAttribute tag="$ControllerActivity" name="android:configChanges" value="orientation|screenSize" />
				<addAttribute tag="$ControllerActivity" name="android:hardwareAccelerated" value="true" />
				<addElement tag="application" name="ControllerActivity" />

				<setElement result="InterstitialActivity" value="activity" />
				<addAttribute tag="$InterstitialActivity" name="android:name" value="com.ironsource.sdk.controller.InterstitialActivity" />
				<addAttribute tag="$InterstitialActivity" name="android:configChanges" value="orientation|screenSize" />
				<addAttribute tag="$InterstitialActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$InterstitialActivity" name="android:theme" value="@android:style/Theme.Translucent" />
				<addElement tag="application" name="InterstitialActivity" />

				<setElement result="OpenUrlActivity" value="activity" />
				<addAttribute tag="$OpenUrlActivity" name="android:name" value="com.ironsource.sdk.controller.OpenUrlActivity" />
				<addAttribute tag="$OpenUrlActivity" name="android:configChanges" value="orientation|screenSize" />
				<addAttribute tag="$OpenUrlActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$OpenUrlActivity" name="android:theme" value="@android:style/Theme.Translucent" />
				<addElement tag="application" name="OpenUrlActivity" />

				<!-- activity is also defined in com.facebook.android:audience-network-sdk
				<setElement result="AudienceNetworkActivity" value="activity" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:name" value="com.facebook.ads.AudienceNetworkActivity" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:exported" value="false" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize" />
				<addAttribute tag="$AudienceNetworkActivity" name="android:hardwareAccelerated" value="true" />
				<addElement tag="application" name="AudienceNetworkActivity" />
				-->

				<!-- activity is also defined in com.unity3d.ads:unity-ads
				<setElement result="AdUnitActivity" value="activity" />
				<addAttribute tag="$AdUnitActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitActivity" />
				<addAttribute tag="$AdUnitActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AdUnitActivity" name="android:theme" value="@android:style/Theme.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitActivity" />

				<setElement result="AdUnitTransparentActivity" value="activity" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitTransparentActivity" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AdUnitTransparentActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitTransparentActivity" />

				<setElement result="AdUnitTransparentSoftwareActivity" value="activity" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitTransparentSoftwareActivity" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:hardwareAccelerated" value="false" />
				<addAttribute tag="$AdUnitTransparentSoftwareActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitTransparentSoftwareActivity" />

				<setElement result="AdUnitSoftwareActivity" value="activity" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:name" value="com.unity3d.services.ads.adunit.AdUnitSoftwareActivity" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:configChanges" value="fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:hardwareAccelerated" value="false" />
				<addAttribute tag="$AdUnitSoftwareActivity" name="android:theme" value="@android:style/Theme.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="AdUnitSoftwareActivity" />
				-->

				<setElement result="GmsAdActivity" value="activity" />
				<addAttribute tag="$GmsAdActivity" name="android:name" value="com.google.android.gms.ads.AdActivity" />
				<addAttribute tag="$GmsAdActivity" name="android:exported" value="false" />
				<addAttribute tag="$GmsAdActivity" name="android:configChanges" value="keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize" />
				<addAttribute tag="$GmsAdActivity" name="android:theme" value="@android:style/Theme.Translucent" />
				<addElement tag="application" name="GmsAdActivity" />

				<setElement result="AdMobAppId" value="meta-data" />
				<addAttribute tag="$AdMobAppId" name="android:name" value="com.google.android.gms.ads.APPLICATION_ID" />
				<addAttribute tag="$AdMobAppId" name="android:value" value="$S(GADAppId)" />
				<addElement tag="application" name="AdMobAppId" />

				<addAttribute tag="application" name="android:usesCleartextTraffic" value="true"/>

				<setElement result="CBImpressionActivity" value="activity" />
				<addAttribute tag="$CBImpressionActivity" name="android:name" value="com.chartboost.sdk.CBImpressionActivity" />
				<addAttribute tag="$CBImpressionActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize" />
				<addAttribute tag="$CBImpressionActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$CBImpressionActivity" name="android:excludeFromRecents" value="true" />
				<addAttribute tag="$CBImpressionActivity" name="android:theme" value="@android:style/Theme.Translucent.NoTitleBar.Fullscreen" />
				<addElement tag="application" name="CBImpressionActivity" />

				<setElement result="AppLovinInterstitialActivity" value="activity" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:name" value="com.applovin.adview.AppLovinInterstitialActivity" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:configChanges" value="orientation|screenSize|smallestScreenSize|screenLayout|uiMode" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AppLovinInterstitialActivity" name="android:screenOrientation" value="behind" />
				<addElement tag="application" name="AppLovinInterstitialActivity" />

				<!-- these activities are also defined in com.applovin:applovin-sdk
				<setElement result="AppLovinFullscreenActivity" value="activity" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:name" value="com.applovin.adview.AppLovinFullscreenActivity" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:configChanges" value="keyboard|keyboardHidden|locale|orientation|screenLayout|screenSize|smallestScreenSize|uiMode" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:exported" value="false" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:hardwareAccelerated" value="true" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:launchMode" value="singleTop" />
				<addAttribute tag="$AppLovinFullscreenActivity" name="android:screenOrientation" value="behind" />
				<addElement tag="application" name="AppLovinFullscreenActivity" />

				<setElement result="AppLovinWebViewActivity" value="activity" />
				<addAttribute tag="$AppLovinWebViewActivity" name="android:name" value="com.applovin.sdk.AppLovinWebViewActivity" />
				<addAttribute tag="$AppLovinWebViewActivity" name="android:configChanges" value="keyboardHidden|orientation|screenSize|uiMode" />
				<addElement tag="application" name="AppLovinWebViewActivity" />
				-->

				<setElement result="DTBInterstitialActivity" value="activity" />
				<addAttribute tag="$DTBInterstitialActivity" name="android:name" value="com.amazon.device.ads.DTBInterstitialActivity" />
				<addElement tag="application" name="DTBInterstitialActivity" />

				<setElement result="DTBAdActivity" value="activity" />
				<addAttribute tag="$DTBAdActivity" name="android:name" value="com.amazon.device.ads.DTBAdActivity" />
				<addElement tag="application" name="DTBAdActivity" />

				<addLibrary android:name="org.apache.http.legacy" android:required="false"/>
			</true>
		</if>
	</androidManifestUpdates>

	<proguardAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					<![CDATA[
					# IronSource
					-keepclassmembers class com.ironsource.sdk.controller.IronSourceWebView$JSInterface {
					public *;
					}
					-keepclassmembers class * implements android.os.Parcelable {
					public static final android.os.Parcelable$Creator *;
					}
					-keep public class com.google.android.gms.ads.** {
					public *;
					}
					-keep class com.ironsource.adapters.** { *;
					}
					-dontwarn com.ironsource.mediationsdk.**
					-dontwarn com.ironsource.adapters.**
					-keepattributes JavascriptInterface
					-keepclassmembers class * {
					@android.webkit.JavascriptInterface <methods>;
					}


					# Custom
					-dontwarn com.applovin.impl.**
					-dontwarn com.chartboost.sdk.**
					-dontwarn com.google.android.exoplayer2.**
					-dontwarn okhttp3.internal.platform.*


					# AppLovin
					-keepattributes Signature,InnerClasses,Exceptions,Annotation
					-keep public class com.applovin.sdk.AppLovinSdk{ *; }
					-keep public class com.applovin.sdk.AppLovin* { public protected *; }
					-keep public class com.applovin.nativeAds.AppLovin* { public protected *; }
					-keep public class com.applovin.adview.* { public protected *; }
					-keep public class com.applovin.mediation.* { public protected *; }
					-keep public class com.applovin.mediation.ads.* { public protected *; }
					-keep public class com.applovin.impl.*.AppLovin { public protected *; }
					-keep public class com.applovin.impl.**.*Impl { public protected *; }
					-keepclassmembers class com.applovin.sdk.AppLovinSdkSettings { private java.util.Map localSettings; }
					-keep class com.applovin.mediation.adapters.** { *; }
					-keep class com.applovin.mediation.adapter.**{ *; }


					# Facebook
					-dontwarn com.facebook.ads.internal.**
					-keeppackagenames com.facebook.*
					-keep public class com.facebook.ads.** {*;}
					-keep public class com.facebook.ads.**
					{ public protected *; }


					# UnityAds
					# Keep filenames and line numbers for stack traces
					-keepattributes SourceFile,LineNumberTable
					# Keep JavascriptInterface for WebView bridge
					-keepattributes JavascriptInterface
					# Sometimes keepattributes is not enough to keep annotations
					-keep class android.webkit.JavascriptInterface {
					*;
					}
					# Keep all classes in Unity Ads package
					-keep class com.unity3d.ads.** {
					*;
					}
					# Keep all classes in Unity Services package
					-keep class com.unity3d.services.** {
					*;
					}
					-dontwarn com.google.ar.core.**
					-dontwarn com.unity3d.services.**
					-dontwarn com.ironsource.adapters.unityads.**

					# Chartboost
					-keep class com.chartboost.** { *; }

					# Pangle
					-keep class com.bytedance.sdk.** { *; }

					# Mintegral
					-keepattributes Signature
					-keepattributes *Annotation*
					-keep class com.mbridge.** {*; }
					-keep interface com.mbridge.** {*; }
					-keep class android.support.v4.** { *; }
					-dontwarn com.mbridge.**
					-keep class **.R$* { public static final int mbridge*; }
					-keep public class com.mbridge.* extends androidx.** { *; }
					-keep public class androidx.viewpager.widget.PagerAdapter{ *; }
					-keep public class androidx.viewpager.widget.ViewPager.OnPageChangeListener{ *; }
					-keep interface androidx.annotation.IntDef{ *; }
					-keep interface androidx.annotation.Nullable{ *; }
					-keep interface androidx.annotation.CheckResult{ *; }
					-keep interface androidx.annotation.NonNull{ *; }
					-keep public class androidx.fragment.app.Fragment{ *; }
					-keep public class androidx.core.content.FileProvider{ *; }
					-keep public class androidx.core.app.NotificationCompat{ *; }
					-keep public class androidx.appcompat.widget.AppCompatImageView { *; }
					-keep public class androidx.recyclerview.*{ *; }

					# Vungle begin
					-keep class com.vungle.warren.** { *; }
					-dontwarn com.vungle.warren.error.VungleError$ErrorCode
					# Moat SDK
					-keep class com.moat.** { *; }
					-dontwarn com.moat.**
					# Okio
					-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
					# Retrofit
					-dontwarn okio.**
					-dontwarn retrofit2.Platform$Java8
					# Gson
					-keepattributes Signature
					-keepattributes *Annotation*
					-dontwarn sun.misc.**
					-keep class com.google.gson.examples.android.model.** { *; }
					-keep class * implements com.google.gson.TypeAdapterFactory
					-keep class * implements com.google.gson.JsonSerializer
					-keep class * implements com.google.gson.JsonDeserializer
					# Google Android Advertising ID
					-keep class com.google.android.gms.internal.** { *; }
					-dontwarn com.google.android.gms.ads.identifier.**
					# Vungle end

					# APS
					-keep class com.amazon.device.ads.** { *; }
					]]>
				</insert>
			</true>
		</if>
	</proguardAdditions>

	<buildGradleAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					repositories {

					jcenter()
					mavenCentral()
					google()

					maven {
					url 'https://android-sdk.is.com/'
					}
					maven {
					url "https://www.jitpack.io"
					}
					maven {
					url "https://artifact.bytedance.com/repository/pangle"
					}
					maven {
        			url  "https://dl-maven-android.mintegral.com/repository/mbridge_android_sdk_oversea"
 					}
					}

					dependencies {
					implementation 'com.ironsource.sdk:mediationsdk:7.5.2'
					implementation fileTree(dir: 'libs', include: ['*.jar'])
					implementation 'com.google.android.gms:play-services-appset:16.0.0'
					implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
					implementation 'com.google.android.gms:play-services-basement:18.1.0'

					// Add AdMob and Ad Manager Network
					implementation 'com.google.android.gms:play-services-ads:22.2.0'
					implementation 'com.ironsource.adapters:admobadapter:4.3.39'
					// Add Applovin Network
					implementation 'com.ironsource.adapters:applovinadapter:4.3.39'
					implementation 'com.applovin:applovin-sdk:11.10.1'
					// Add Chartboost Network
					implementation 'com.ironsource.adapters:chartboostadapter:4.3.12'
					implementation 'com.chartboost:chartboost-sdk:9.2.1'
					// Add Facebook Network
					implementation 'com.ironsource.adapters:facebookadapter:4.3.45'
					implementation 'com.facebook.android:audience-network-sdk:6.16.0'
					// Add Pangle Network
					implementation 'com.ironsource.adapters:pangleadapter:4.3.22'
					implementation 'com.pangle.global:ads-sdk:5.5.0.5'
					// Add UnityAds Network
					implementation 'com.ironsource.adapters:unityadsadapter:4.3.33'
					implementation 'com.unity3d.ads:unity-ads:4.9.1'
					// Add Mintegral Network
					implementation 'com.ironsource.adapters:mintegraladapter:4.3.19'
					implementation 'com.mbridge.msdk.oversea:mbbid:16.5.21'
					implementation 'com.mbridge.msdk.oversea:reward:16.5.21'
					implementation 'com.mbridge.msdk.oversea:mbbanner:16.5.21'
					implementation 'com.mbridge.msdk.oversea:newinterstitial:16.5.21'
					// Add Liftoff (Vungle) Network
					implementation 'com.ironsource.adapters:vungleadapter:4.3.22'
					implementation 'com.vungle:vungle-ads:7.0.0'
					// Add Digital Turbine (Fyber) Network
					implementation 'com.ironsource.adapters:fyberadapter:4.3.28'
					implementation "com.fyber:marketplace-sdk:8.2.4"
					// Add APS Network
					implementation 'com.amazon.android:aps-sdk:9.8.+'
					implementation 'com.ironsource.adapters:apsadapter:4.3.9'
					}
				</insert>
			</true>
		</if>
	</buildGradleAdditions>

	<gameActivityImportAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					import android.util.Log;
					import com.ironsource.adapters.supersonicads.SupersonicConfig;
					import com.ironsource.mediationsdk.IronSource;
					import com.ironsource.mediationsdk.IronSourceBannerLayout;
					import com.ironsource.mediationsdk.IronSourceSegment;
					import com.ironsource.mediationsdk.integration.IntegrationHelper;
					import com.ironsource.mediationsdk.logger.IronSourceError;
					import com.ironsource.mediationsdk.model.Placement;
					import com.ironsource.mediationsdk.sdk.BannerListener;
					import com.ironsource.mediationsdk.sdk.LevelPlayInterstitialListener;
					import com.ironsource.mediationsdk.sdk.OfferwallListener;
					import com.ironsource.mediationsdk.sdk.LevelPlayRewardedVideoListener;
					import com.ironsource.mediationsdk.adunit.adapter.utility.AdInfo;
					import com.ironsource.mediationsdk.impressionData.ImpressionDataListener;
					import com.ironsource.mediationsdk.impressionData.ImpressionData;
					import com.ironsource.mediationsdk.utils.IronSourceUtils;
					import com.amazon.device.ads.*;
				</insert>
			</true>
		</if>
	</gameActivityImportAdditions>

	<gameActivityClassAdditions>
		<if condition="bIronSourceEnable">
			<true>
				<insert>
					<![CDATA[
					/// ******************* CALL TO CPP ********************
					///    *********************************************
					///
					private native void onLevelPlayAdAvailableThunkCpp(AdInfo adInfo);
					private native void onLevelPlayAdUnavailableThunkCpp();
					private native void onLevelPlayAdOpenedThunkCpp(AdInfo adInfo);
					private native void onLevelPlayAdClosedThunkCpp(AdInfo adInfo);
					private native void onLevelPlayAdRewardedThunkCpp(Placement placement, AdInfo adInfo);
					private native void onLevelPlayAdShowFailedThunkCpp(int errorCode, String errorMessage, AdInfo adInfo);
					private native void onLevelPlayAdClickedThunkCpp(Placement placement, AdInfo adInfo);
					
					private native void onImpressionSuccessThunkCpp(ImpressionData Data);

					private native void onInterstitialAdReadyThunkCpp(AdInfo adInfo);
					private native void onInterstitialAdLoadFailedThunkCpp(int errorCode, String errorMessage);
					private native void onInterstitialAdOpenedThunkCpp(AdInfo adInfo);
					private native void onInterstitialAdClosedThunkCpp(AdInfo adInfo);
					private native void onInterstitialAdShowFailedThunkCpp(int errorCode, String errorMessage, AdInfo adInfo);
					private native void onInterstitialAdClickedThunkCpp(AdInfo adInfo);
					private native void onInterstitialAdShowSucceededThunkCpp(AdInfo adInfo);

					private native void onOfferwallAvailabilityChangedThunkCpp(boolean available);
					private native void onOfferwallOpenedThunkCpp();					
					private native void onOfferwallShowFailedThunkCpp(int errorCode, String errorMessage);
					private native boolean onOfferwallCreditedThunkCpp(int credits, int totalCredits, boolean totalCreditsFlag);
					private native void onOfferwallGetCreditsFailedThunkCpp(int errorCode, String errorMessage);
					private native void onOfferwallClosedThunkCpp();

					/// ******************* REWARDED VIDEO ******************
					///    ***********************************************
					///
					
					LevelPlayRewardedVideoListener mLevelPlayRewardedVideoListener = new LevelPlayRewardedVideoListener() {
						// Indicates that there's an available ad.
						// The adInfo object includes information about the ad that was loaded successfully
						@Override
						public void onAdAvailable(AdInfo adInfo)
						{
							onLevelPlayAdAvailableThunkCpp(adInfo);
						}

						// Indicates that no ads are available to be displayed
						@Override
						public void onAdUnavailable()
						{
							onLevelPlayAdUnavailableThunkCpp();
						}

						// The Rewarded Video ad view has opened. Your activity will loose focus
						@Override
						public void onAdOpened(AdInfo adInfo)
						{
							onLevelPlayAdOpenedThunkCpp(adInfo);
						}

						// The Rewarded Video ad view is about to be closed. Your activity will regain its focus
						@Override
						public void onAdClosed(AdInfo adInfo)
						{
							onLevelPlayAdClosedThunkCpp(adInfo);
						}

						// The user completed to watch the video, and should be rewarded.
						// The placement parameter will include the reward data.
						// When using server-to-server callbacks, you may ignore this event and wait for the ironSource server callback
						@Override
						public void onAdRewarded(Placement placement, AdInfo adInfo)
						{
							onLevelPlayAdRewardedThunkCpp(placement, adInfo);
						}

						// The rewarded video ad was failed to show
						@Override
						public void onAdShowFailed(IronSourceError error, AdInfo adInfo)
						{
							onLevelPlayAdShowFailedThunkCpp(error.getErrorCode(), error.getErrorMessage(), adInfo);
						}

						// Invoked when the video ad was clicked.
						// This callback is not supported by all networks, and we recommend using it
						// only if it's supported by all networks you included in your build
						@Override
						public void onAdClicked(Placement placement, AdInfo adInfo)
						{
							onLevelPlayAdClickedThunkCpp(placement, adInfo);
						}
					};

					/// ******************** IMPRESSION ********************
					///    *********************************************
					///
					ImpressionDataListener mImpressionDataListener = new ImpressionDataListener()
					{
						@Override 
						public void onImpressionSuccess(ImpressionData impressionData)
						{
							onImpressionSuccessThunkCpp(impressionData);
						}
					};

					/// ******************* INTERSTITIALS *******************
					///    ***********************************************
					///
					LevelPlayInterstitialListener mLevelPlayInterstitialVideoListener = new LevelPlayInterstitialListener()
					{
						// Invoked when the interstitial ad was loaded successfully.
						// AdInfo parameter includes information about the loaded ad
						@Override
						public void onAdReady(AdInfo adInfo)
						{
							Log.debug("onAdReady");
							onInterstitialAdReadyThunkCpp(adInfo);
						}

						// Indicates that the ad failed to be loaded
						@Override
						public void onAdLoadFailed(IronSourceError error)
						{
							Log.debug(String.format("onAdLoadFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
							
							onInterstitialAdLoadFailedThunkCpp(error.getErrorCode(), error.getErrorMessage());
						}

						// Invoked when the Interstitial Ad Unit has opened, and user left the application screen.
						// This is the impression indication.
						@Override
						public void onAdOpened(AdInfo adInfo)
						{
							Log.debug("onAdOpened");

							onInterstitialAdOpenedThunkCpp(adInfo);
						}

						// Invoked when the interstitial ad closed and the user went back to the application screen.
						@Override
						public void onAdClosed(AdInfo adInfo)
						{
							Log.debug("onAdClosed");
							onInterstitialAdClosedThunkCpp(adInfo);
						}

						// Invoked when the ad failed to show
						@Override
						public void onAdShowFailed(IronSourceError error, AdInfo adInfo)
						{
							Log.debug(String.format("onAdShowFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
					
							onInterstitialAdShowFailedThunkCpp (error.getErrorCode(), error.getErrorMessage(), adInfo);
						}

						// Invoked when end user clicked on the interstitial ad
						@Override
						public void onAdClicked(AdInfo adInfo)
						{
							Log.debug("onAdClicked");
							onInterstitialAdClickedThunkCpp(adInfo);
						}

						// Invoked before the interstitial ad was opened, and before the InterstitialOnAdOpenedEvent is reported.
						// This callback is not supported by all networks, and we recommend using it only if
						// it's supported by all networks you included in your build.
					 	@Override
						public void onAdShowSucceeded(AdInfo adInfo)
						{
							Log.debug("onAdShowSucceeded");
							onInterstitialAdShowSucceededThunkCpp(adInfo);
						}
					};

					/// ********************* OFFERWALL *********************
					///    ***********************************************
					///
					OfferwallListener mOfferwallListener = new OfferwallListener()
					{
						/**
						* Invoked when there is a change in the Offerwall availability status.
						* @param - available - value will change to YES when Offerwall are available.
						* You can then show the offerwall by calling showOfferwall(). Value will *change to NO when Offerwall isn't available.
						*/
						@Override
						public void onOfferwallAvailable(boolean isAvailable) 
						{
							Log.debug(String.format("onOfferwallAvailable: %b", isAvailable));
							onOfferwallAvailabilityChangedThunkCpp(isAvailable);
						}
					
						/**
						* Invoked when the Offerwall successfully loads for the user, after calling the 'showOfferwall' method
						*/
						@Override
						public void onOfferwallOpened() 
						{
							Log.debug("onOfferwallOpened");
							onOfferwallOpenedThunkCpp();
						}
					
						/**
						* Invoked when the method 'showOfferwall' is called and the Offerwall fails to load.
						* @param error - A IronSourceError Object which represents the reason of 'showOfferwall' failure.
						*/
						@Override
						public void onOfferwallShowFailed(IronSourceError error) 
						{
							Log.debug(String.format("onOfferwallShowFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
							onOfferwallShowFailedThunkCpp(error.getErrorCode(), error.getErrorMessage());
						}
					
						/**
						* Invoked each time the user completes an Offer.
						* Award the user with the credit amount corresponding to the value of the *‘credits’ parameter.
						* @param credits - The number of credits the user has earned.
						* @param totalCredits - The total number of credits ever earned by the user.
						* @param totalCreditsFlag - In some cases, we won’t be able to provide the exact
						* amount of credits since the last event (specifically if the user clears
						* the app’s data). In this case the ‘credits’ will be equal to the ‘totalCredits’, and this flag will be ‘true’.
						* @return boolean - true if you received the callback and rewarded the user, otherwise false.
						*/
						@Override
						public boolean onOfferwallAdCredited(int credits, int totalCredits, boolean totalCreditsFlag) 
						{
							Log.debug("onOfferwallAdCredited");
							return onOfferwallCreditedThunkCpp (credits, totalCredits, totalCreditsFlag);
						}
					
						/**
						* Invoked when the method 'getOfferwallCredits' fails to retrieve
						* the user's credit balance info.
						* @param error - A IronSourceError object which represents the reason of 'getOfferwallCredits' failure.
						* If using client-side callbacks to reward users, it is mandatory to return true on this event
						*/
						@Override
						public void onGetOfferwallCreditsFailed(IronSourceError error) 
						{
							Log.debug(String.format("onGetOfferwallCreditsFailed error. Errcode: %d, Reason: %s.",
								error.getErrorCode(), error.getErrorMessage()));
							onOfferwallGetCreditsFailedThunkCpp(error.getErrorCode(), error.getErrorMessage());
						}
					
						/**
						* Invoked when the user is about to return to the application after closing
						* the Offerwall.
						*/
						@Override
						public void onOfferwallClosed() 
						{
							Log.debug("onOfferwallClosed");
							onOfferwallClosedThunkCpp();
						}
					};

					/// ******************* CALLABLE FROM CPP *******************
					///    ***********************************************
					///
					// NOTE: call _setSupersonicConfClientSideCallbacks before _init
					public void AndroidThunkJava_IronSource_setOfferwallUseClientSideCallbacks(boolean value)
					{
						Log.debug(String.format("AndroidThunkJava_IronSource_setOfferwallUseClientSideCallbacks: %b", value));

						SupersonicConfig.getConfigObj().setClientSideCallbacks(value);
					}
					
					public void AndroidThunkJava_IronSource_init(String APIKey, String UserId, String APSAppId)
					{
						Log.debug("AndroidThunkJava_IronSource_init");

						if (APSAppId != null && !APSAppId.isEmpty())
						{
							// Init APS SDK before IS (see https://developers.is.com/ironsource-mobile/android/aps-integration-guide/#step-6)
							AdRegistration.getInstance(APSAppId, this);
							Log.debug("APS is initialized");
						}
						else
						{
							Log.debug("APS is NOT initialized");
						}

						IronSource.setUserId(UserId);
						IronSource.setLevelPlayRewardedVideoListener(mLevelPlayRewardedVideoListener);
						IronSource.addImpressionDataListener(mImpressionDataListener);
						IronSource.setLevelPlayInterstitialListener(mLevelPlayInterstitialVideoListener);
						IronSource.setOfferwallListener(mOfferwallListener);
						
						IronSource.init(this, APIKey);
						IntegrationHelper.validateIntegration(this);
					}
					
					public void AndroidThunkJava_IronSource_ForceUpdateUser(String UserId)
					{
						Log.debug("AndroidThunkJava_IronSource_ForceUpdateUser");
						IronSource.setDynamicUserId(UserId);
						IntegrationHelper.validateIntegration(this);
					}

					public void AndroidThunkJava_IronSource_SetSegmentInfo(String SegmentName, String SegmentRevenueKey, String SegmentRevenue)
					{
						Log.debug("AndroidThunkJava_IronSource_SetSegmentInfo");
						IronSourceSegment ironSegment = new IronSourceSegment();
						ironSegment.setSegmentName(SegmentName);
						ironSegment.setCustom(SegmentRevenueKey, SegmentRevenue);
					
						IronSource.setSegment(ironSegment);
						IntegrationHelper.validateIntegration(this);
					}

					public boolean AndroidThunkJava_IronSource_hasRewardedVideo()
					{
						return IronSource.isRewardedVideoAvailable();
					}

					public String AndroidThunkJava_IronSource_getPlacementRewardName(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_getPlacementRewardName");
						Placement CurrentPlacement = IronSource.getRewardedVideoPlacementInfo(PlacementName);
						if (CurrentPlacement != null)
						{
							return CurrentPlacement.getRewardName();
						}
						else
						{
							return new String();
						}
					}

					public int AndroidThunkJava_IronSource_getPlacementRewardAmount(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_getPlacementRewardAmount");
						Placement CurrentPlacement = IronSource.getRewardedVideoPlacementInfo(PlacementName);
						if (CurrentPlacement != null)
						{
							return CurrentPlacement.getRewardAmount();
						}
						else
						{
							return 0;
						}
					}

					public boolean AndroidThunkJava_IronSource_isRewardedVideoCappedForPlacement(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_isRewardedVideoCappedForPlacement");
						return IronSource.isRewardedVideoPlacementCapped(PlacementName);
					}

					public void AndroidThunkJava_IronSource_showRewardedVideo(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_showRewardedVideo");
						IronSource.showRewardedVideo(PlacementName);
					}

					public void AndroidThunkJava_IronSource_setGDPRConsent(boolean bConsent)
					{
						Log.debug("AndroidThunkJava_IronSource_setGDPRConsent");
						IronSource.setConsent(bConsent);
					}

					public void AndroidThunkJava_IronSource_loadInterstitial()
					{
						Log.debug("AndroidThunkJava_IronSource_LoadInterstitial");
						IronSource.loadInterstitial();
					}

					public boolean AndroidThunkJava_IronSource_isInterstitialReady()
					{
						Log.debug("AndroidThunkJava_IronSource_isInterstitialReady");
						return IronSource.isInterstitialReady();
					}

					public void AndroidThunkJava_IronSource_showInterstitial(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_showInterstitial");
						IronSource.showInterstitial(PlacementName);
					}

					public boolean AndroidThunkJava_IronSource_isInterstitialCappedForPlacement(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_isInterstitialCappedForPlacement");
						return IronSource.isInterstitialPlacementCapped(PlacementName);
					}

					public boolean AndroidThunkJava_IronSource_hasOfferwall()
					{
						Log.debug("AndroidThunkJava_IronSource_hasOfferwall");
						return IronSource.isOfferwallAvailable();
					}

					public void AndroidThunkJava_IronSource_showOfferwall()
					{
						Log.debug("AndroidThunkJava_IronSource_showOfferwall");
						IronSource.showOfferwall();
					}

					public void AndroidThunkJava_IronSource_showOfferwallWithPlacement(String PlacementName)
					{
						Log.debug("AndroidThunkJava_IronSource_showOfferwallWithPlacement");
						IronSource.showOfferwall(PlacementName);
					}

					public void AndroidThunkJava_IronSource_getOfferwallCredits()
					{
						Log.debug("AndroidThunkJava_IronSource_getOfferwallCredits");
						IronSource.getOfferwallCredits();
					}
					]]>
				</insert>
			</true>
		</if>
	</gameActivityClassAdditions>
	
	<gameActivityOnPauseAdditions>
		<if condition="bIronSourceEnable">
			<true>
				IronSource.onPause(this);
			</true>
		</if>
	</gameActivityOnPauseAdditions>

	<gameActivityOnResumeAdditions>
		<if condition="bIronSourceEnable">
			<true>
				IronSource.onResume(this);
			</true>
		</if>
	</gameActivityOnResumeAdditions>
</root>
